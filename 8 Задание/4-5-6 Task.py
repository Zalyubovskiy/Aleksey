"""
Задание-4,5,6. Начните работу над проектом «Склад оргтехники».
Создайте класс, описывающий склад. А также класс «Оргтехника»,
который будет базовым для классов-наследников. Эти классы —
конкретные типы оргтехники (принтер, сканер, ксерокс).
В базовом классе определить параметры, общие для приведенных
типов. В классах-наследниках реализовать параметры, уникальные
для каждого типа оргтехники.
--------------------------------------------------------------------------
Продолжить работу над первым заданием. Разработать методы,
отвечающие за приём оргтехники на склад и передачу в определенное
подразделение компании. Для хранения данных о наименовании и количестве
единиц оргтехники, а также других данных, можно использовать
любую подходящую структуру, например словарь.
--------------------------------------------------------------------------
Продолжить работу над вторым заданием. Реализуйте механизм валидации
вводимых пользователем данных. Например, для указания количества принтеров,
отправленных на склад, нельзя использовать строковый тип данных.
Подсказка: постарайтесь по возможности реализовать в проекте
«Склад оргтехники» максимум возможностей, изученных на уроках
по ООП.
"""


class Storage:

    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.items = {"Модель": self.name, "Цена(ед)": self.price, "Кол-во": self.quantity}

    def income(self):
        try:
            name = input("Введите наименование: ")
            price = int(input("Введите цену за ед: "))
            quantity = int(input("Введите количество: "))
            item = {"Модель": name, "Цена(ед)": price, "Кол-во": quantity}
            self.items.update(item)
            print(self.items)
        except ValueError:
            print("Ошибка. Неверные данные!")


class Printer(Storage):
    pass


class Scanner(Storage):
    pass


class Multifunct(Storage):
    pass


p = Printer("Hp", 4, 423)
s = Scanner('Canon', 1023, 44)
m = Multifunct('Multifunct', 48481, 4545)
p.income()
s.income()
m.income()
